반도체대학 1층 입
편의시설 ; 2중 딕셔너리 구조
서치: 해시 테이블


해시 테이블
해시 테이블은 Python의 딕셔너리 자료구조의 내부 구현에 사용됩니다. 딕셔너리는 해시 테이블을 기반으로 키-값 쌍을 저장하고 관리합니다. 이로 인해 딕셔너리의 키를 통해 값을 검색, 삽입, 삭제하는 연산이 평균적으로 O(1)의 시간 복잡도를 갖습니다.

여기서 해시 테이블이 사용된 부분을 자세히 설명하겠습니다:

### 1. 노드에 대한 속성 저장
노드를 추가할 때 노드의 속성과 시설 정보를 딕셔너리에 저장합니다. 예를 들어, `Graph_Manager` 클래스의 `add_node` 메서드에서 각 노드의 `facilities` 속성은 딕셔너리로 저장됩니다.

```python
self.graph.add_node(node_id, label=label, **attrs)
```

위 코드에서 `**attrs`에 딕셔너리가 포함되며, 이는 내부적으로 해시 테이블에 의해 관리됩니다.

### 2. 특정 시설을 포함하는 노드 검색
특정 시설을 포함하는 모든 노드를 찾기 위해 딕셔너리의 키를 검색합니다. 이 작업은 `find_nodes_with_facility` 메서드에서 수행됩니다.

```python
def find_nodes_with_facility(self, facility_name):
    return [node for node, data in self.graph.nodes(data=True) if facility_name in data.get('facilities', {})]
```

이 코드에서 `data.get('facilities', {})`는 각 노드의 `facilities` 속성을 가져오는데, 이는 딕셔너리입니다. `facility_name in data.get('facilities', {})`는 딕셔너리의 키를 검색하는 연산으로, 해시 테이블을 사용하여 평균 O(1) 시간에 수행됩니다.

### 3. 노드 속성 접근
노드 속성에 접근하는 부분도 해시 테이블을 사용합니다. 예를 들어, `draw_graph` 메서드에서 노드의 색상을 설정할 때 `highlight_nodes` 리스트에 포함된 노드의 색상을 변경합니다.

```python
node_colors = ['yellow' if node in highlight_nodes else 'lightblue' for node in nodes]
```

여기서 `highlight_nodes`는 파이썬 리스트이지만, 노드의 속성은 내부적으로 딕셔너리로 관리됩니다.

### 요약
딕셔너리의 주요 사용 부분:
- 노드에 대한 속성과 시설 정보 저장
- 특정 시설을 포함하는 노드 검색
- 노드 속성 접근

이 모든 연산에서 딕셔너리의 해시 테이블 구현 덕분에 평균적으로 O(1) 시간 복잡도로 연산을 수행할 수 있습니다. 해시 테이블은 딕셔너리의 핵심 구성 요소로, 키를 해싱하여 고유한 인덱스로 변환한 후 해당 인덱스에 값을 저장하거나 검색하는 방식으로 동작합니다. 이러한 구현 덕분에 딕셔너리는 매우 빠른 검색 성능을 제공합니다.