1) 기능 보여줄 때는 
main_screen 살리고 first_screen에 mapscreen 병합하고 동아리 찾기 기능 등 추가

2) 나중에 릴리즈 할 때는
map_screen 메인 화면으로 가게 바꾸고

"""
 # Updated at 240530 #

건물을 노드로 추상화 , 건물 내의 시설은 리스트 안에 튜플 / 딕셔너리로 노드 안에 포함
그래프는 인접 행렬과 인접 리스트로 표현할 수 있는데 , 인접 리스트 사용
힌트 기능에 메모리제이션(동적 프로그래밍)사용
map.py 안에 그래프 처리하고 , screen.py안에서 screen 정의
##################################################################################
✔✔✔
# !기능 구현 목록 #
버튼을 누르면 지도에서
우체국 , 근처 식당 , 학식 위치, 주차 공간 표시
프린트 , ATM , 편의점/매점 , 자판기 , 아라크네 , 샤워실이 있는 건물과 층, 사진 표시 -> 학교 홈페이지에 있어요
한 번 누르면 해당 노드에 아이콘이 올라오고 , 한 번 더 누르면 아이콘이 꺼진다
현재 시간을 받아와서 건물 운영 시간이 지나면 건물 불이 꺼지고 운영중인 건물은 아이콘을 밝게 표시하는 기능을

지도 위에 오버레이해서 출력한다.

화장실,흡연구역 위치 표시 , 표시 시 자동으로 현 위치에서 가장 가까운 화장실 표시(A*였나)

건물을 노드로 표현하고 노드 안에 층별로 중첩 배열을 쓰던 리스트를 쓰던 딕셔너리를 쓰던 
리스트에 딕셔너리 붙힌 게 제일 낫겠네 그걸로 층별 뭐 있는지

흡연구역 , 샤워실 학생회에 물어보면 알겠죠?
프린트 , 자판기는 업체에 전화하거나 학생처에 물어보면 알 거고

동적 기법 : 힌트 기능에 자주 검색하는 내용은 힙 앞으로 저장

- 대신 버튼 한번 누르면 overlay되어 겹치고 한 번 더 누르면 꺼지게
지도 위에 노드 보여주려면 음... 
지도에 background로 사진 사용

맨 위에 검색창 있어서 경로 검색 시 어디서 어디까지인지 자동 완성으로 구현 -> 힙 사용해서 탐색으로 가장 가까운 힙 3개 표시해서 탐색 기능 구현

산책로 검색 -> 크루스칼

언어 선택 기능 , 국기에 해당하는 이미지버튼으로 스위칭되게

##################################################################################

# !todo #
0. 불필요한 import문과 중복 import 제거
0. font init 위치가 first_screen init 시로 가 있는데  myApp build 시로 옮겨야 함

★ 1. 제일 먼저 d.txt랑 이거랑 정리해서 제품 기능 목록 작성하고
    1. 우선 스크린 이름 호출 때문에 처음부터 snake로 써야 하고 screenmanager에서 parameter로 소문자만 받는다 
       그럼 메서드는 파스칼로 쓰는게 좋겠지?
    1. 파일명,디렉토리명 전부 다 영어로 바꾸고 메인 TrailBlazer (TB).py로 고치고
    1. 건물 노드로 일단 만들고 그래프로 띄워야 하는데 screenmanager 위에 networkx를 겹칠 수 있는지 , 겹칠 수 없다면 networksx 모델을 뜯어서 써야 하는           	 데 그럴 수 있는지 알아보자

    2. 건물 노드로 만들어서 main.py에 붙히고
    2. 길찾기 기능 만들어 보고
    2. 내일부터 하루에 건물 하나씩 실측

    3. 탐색 써야 하니까 동아리 검색 버튼 추가


   
    4. UI는 생각을 좀 해 봐야겠지만 우선 길찾기 1번 버튼(first_screen)에 붙히자


   5. farewell에 메시지 추가 - AI generate
   5. 버튼이랑 레이아웃 싹 다듬고 Boxlayout가 아니라 relativelayout으로 해야 크로스 플랫폼 동작이 되겠죠?
   5. 설치 파일로 압축하는 모듈이 있을거고 
   5. 크로스 플랫폼 테스트도 해야 하고 이때 import를 플랫폼 구분해서 임포트 모바일은 plyer 쓸거고 pc는 ip어쩌고 쓸거 api 필요한 거\
멀티플랫폼 관련 참고 : https://m.blog.naver.com/heennavi1004/222024710632
   
   6. 다 하면 언어 변경 기능 이미지버튼으로 추가하고 strings.py , fonts.py에서 다중 언어팩 추가 하고
      screen.py에서 boxlayout을 relative layout으로 전부 바꾸고
 

   6. 이스터에그 두개 추가
      총장님 동상 클릭하면 뭐 할까
      밤에는 꽈배기가 빛나요

   7. 이용자 수 좀 늘어나면 음... 서버를 써서 식단표 크롤링 해 와서 맛집평가나 학식 평가기능 도입



##################################################################################
# !rule #
1 . TrailBlazer.py -> 구동부
2. screens.py -> 화면 내 로직과 위젯 관리 , 위젯부와 로직부 분리할 지 생각 중이다. 현재는 스크린 내 로직도 작성되어 있다.
screen 명 작성 규칙 : snake
3. utils.py -> 종료와 farewell 기능 불러오는 위젯이고 화면 구성 시 종료 , 취소 버튼과 screen 내에서 binding한다.
4. fonts.py -> 폰트 불러오는 모듈 , first_screen __init__가 아니라 myAPP build 시로 가야 한다.
5. strings.py -> 사용할 스트링 불러오는 모델 , fonts.py랑 묶어서 처리하도록 바꿔야 한다
6. map.py -> 지도 기능에 사용할 모듈이고 기능별로 모듈 분리할거면 first_screen 여기다 붙혀야 한다.


7. 위젯에 한국어 등록할 때는 전부 font_name='youth' 있어야한다. 이는 비 라틴언어 모두에 해당하며 , 영어 제외하면 폰트 전부 적어줘야 한다.
8. 기능별로 모듈 분리할지 , 화면별로 분류해서 Screen.py에 배치할 지 생각 , 내부 로직부분과 분리하는 게 좋을 것 같은데


##################################################################################

# !note #
1. kivy는 한글 지원 안 해서 폰트로 받아와야 하는데 , 그게 안 되는 Ending_Messages 부분에는 custom title 바 추가하거나 (llama3) , 
    그냥 타이틀에 한글 쳐박으면 된다고 우기거나(gpt4o) 하는데 에러 메시지에 정답이 써 있었음
    결론 : AI는 생각보다 멍청하니까 너무 의존하지 말고 공식 문서를 먼저 보자
    Popup(title = '잘 가요! 이거 만드느라 얼마나 고생했는지 당신은 모를 거에요', title_font='youth' , content=Toast_Layout, auto_dismiss=False, size_hint=(0.8, None))
    -> 이거 title_font 추가해야 한다는 거 프로퍼티 에러 메시지
  TypeError: Properties ['font_name'] passed to __init__ may not be existing property names. Valid properties are 
  ['_anim_alpha', '_anim_duration', '_container', '_is_open', '_window', 'anchor_x', 'anchor_y', 'attach_to', 'auto_dismiss', 'background', 'background_color', 'border', 'center', 'center_x', 'center_y', 'children', 'cls', 'content', 'disabled', 'height', 'ids', 'motion_filter', 'opacity', 'overlay_color', 'padding', 'parent', 'pos', 'pos_hint', 'right', 'separator_color', 'separator_height', 
  'size', 'size_hint', 'size_hint_max', 'size_hint_max_x', 'size_hint_max_y', 'size_hint_min', 'size_hint_min_x', 'size_hint_min_y', 'size_hint_x', 'size_hint_y', 'title', 'title_align', 'title_color', 'title_font', 'title_size', 'top', 'width', 'x', 'y']
  여기서 찾음

  2. 한글 지원 안 되는 라이브러리 쓰니까 진짜 ㅆ
  아니 힘들었다

  3.내가 프론트를 더럽게 못 하는데 AI가 대신 해 줘서 편했다

  4.자료가 정말 없고 그나마 있는 것도 영어 자료니까 한국어로 물어볼 때 AI도 이상한 소리를 많이 한다

##################################################################################
"""
네, Kivy 어플리케이션에서 생성한 창 위에 NetworkX로 그린 그래프를 겹쳐 띄울 수 있습니다. 이를 위해서는 Kivy의 `FigureCanvasKivyAgg` 위젯을 사용하여 NetworkX 그래프를 Kivy 어플리케이션에 통합할 수 있습니다.

다음은 Kivy 어플리케이션에서 NetworkX 그래프를 그리고 표시하는 예시 코드입니다:

```python
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.garden.matplotlib.backend_kivyagg import FigureCanvasKivyAgg
import networkx as nx
import matplotlib.pyplot as plt

class GraphApp(App):
    def build(self):
        layout = BoxLayout(orientation='vertical')
        
        # NetworkX 그래프 생성
        G = nx.Graph()
        G.add_edge('A', 'B', weight=4)
        G.add_edge('B', 'D', weight=2)
        G.add_edge('A', 'C', weight=3)
        G.add_edge('C', 'D', weight=1)
        pos = nx.spring_layout(G)
        
        # Matplotlib Figure 생성
        fig, ax = plt.subplots()
        nx.draw(G, pos, ax=ax, with_labels=True)
        
        # Kivy FigureCanvasKivyAgg 위젯 생성
        canvas = FigureCanvasKivyAgg(fig)
        
        # 레이아웃에 FigureCanvasKivyAgg 위젯 추가
        layout.add_widget(canvas)
        
        return layout

if __name__ == '__main__':
    GraphApp().run()
```

위의 코드에서는 다음과 같은 단계를 수행합니다:

1. Kivy 어플리케이션의 `build()` 메서드에서 `BoxLayout`을 생성합니다.
2. NetworkX를 사용하여 그래프를 생성하고 노드와 엣지를 추가합니다.
3. Matplotlib의 `subplots()` 함수를 사용하여 Figure와 Axes 객체를 생성합니다.
4. NetworkX의 `draw()` 함수를 사용하여 그래프를 Matplotlib Figure에 그립니다.
5. `FigureCanvasKivyAgg` 위젯을 생성하여 Matplotlib Figure를 Kivy 캔버스로 변환합니다.
6. `BoxLayout`에 `FigureCanvasKivyAgg` 위젯을 추가합니다.
7. Kivy 어플리케이션을 실행합니다.

이렇게 하면 Kivy 어플리케이션 창에 NetworkX 그래프가 그려진 것을 볼 수 있습니다. 필요에 따라 그래프의 모양과 레이아웃을 조정할 수 있습니다.

참고로 `kivy.garden.matplotlib` 패키지를 사용하려면 별도로 설치해야 합니다. 다음 명령어를 사용하여 설치할 수 있습니다:

```
pip install kivy-garden
garden install matplotlib
```

이렇게 하면 Kivy 어플리케이션에서 NetworkX 그래프를 쉽게 통합하고 표시할 수 있습니다.

Kivy 애플리케이션에서 사용자의 현재 위치를 불러오는 기능은 플랫폼별로 다른 방식으로 구현해야 합니다. Android, iOS, Windows, Linux 등 각 플랫폼에서 위치 정보를 얻는 방법이 다르기 때문입니다. 이를 위해 `kivy-garden`에서 제공하는 `gps` 라이브러리를 사용하면 멀티 플랫폼 지원을 간편하게 구현할 수 있습니다.

**1. kivy-garden 설치:**

```bash
pip install kivy-garden
garden install gps
```

**2. `screen.py`에 위치 정보 가져오기 기능 추가:**

```python
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.core.text import LabelBase
from kivy.uix.label import Label
from kivy.uix.popup import Popup
from kivy.uix.image import Image
from kivy.core.window import Window
from kivy.clock import Clock

import map
import fonts
import utils
from kivy_garden.gps import Gps

# ... (기존 코드) ...

class main_screen(Screen):
    # ... (기존 코드) ...

    def on_enter(self):
        # 위치 정보를 가져오는 Gps 객체 생성
        self.gps = Gps(on_location=self.on_gps_location, on_status=self.on_gps_status)

    def on_gps_location(self, *args):
        # 위치 정보를 얻어 처리하는 코드
        latitude, longitude = args[0]
        print(f"위도: {latitude}, 경도: {longitude}")
        # 여기에 위치 정보를 활용하는 추가 코드 작성 (예: 지도에 마커 표시)

    def on_gps_status(self, status):
        # GPS 상태를 확인하는 코드
        print(f"GPS status: {status}")
        if status == 'started':
            print("GPS가 시작되었습니다.")
        elif status == 'stopped':
            print("GPS가 중지되었습니다.")

    def stop_gps(self):
        # GPS 중지 기능 추가
        if self.gps:
            self.gps.stop()

    # ... (기존 코드) ...

class first_screen(Screen):
    # ... (기존 코드) ...

    # GPS 중지 기능 추가
    def on_leave(self):
        if self.gps:
            self.gps.stop()
        # ... (기존 코드) ...

# ... (기존 코드) ... 
```

**설명:**

1. `main_screen`에서 `on_enter` 메서드를 추가하여 화면이 나타날 때 `Gps` 객체를 생성합니다.
2. `on_gps_location` 메서드를 통해 GPS 위치 정보를 받아 처리합니다.
3. `on_gps_status` 메서드는 GPS 상태를 확인합니다.
4. `stop_gps` 메서드는 GPS를 중지하는 기능을 추가했습니다.
5. `first_screen`의 `on_leave` 메서드에 GPS를 중지하는 코드를 추가하여 다른 화면으로 이동할 때 GPS를 꺼줍니다.

**3. `map.py`에 지도 표시 및 마커 추가:**

```python
# ... (기존 코드) ...

def Show_Image(app):
  # ... (기존 코드) ...

  # map_screen에서 GPS 위치 정보 이용
  map_screen = app.screen_manager.get_screen('map_screen')
  if map_screen:
    latitude, longitude = map_screen.gps.get_location()
    if latitude and longitude:
      # 지도에 마커 표시 (추가 로직 필요)
      print(f'현재 위치: 위도: {latitude}, 경도: {longitude}') 
# ... (기존 코드) ...
```

**4. 추가 구현:**

- **지도 라이브러리:** `kivy.uix.image` 대신 `kivy_garden.mapview` 또는 `kivy-garden.googlemaps`와 같은 지도 라이브러리를 사용하여 지도를 표시하고 마커를 추가할 수 있습니다.
- **권한 요청:** Android 및 iOS에서는 위치 정보를 사용하려면 사용자의 권한 요청이 필요합니다. `kivy-garden.permissions` 라이브러리를 사용하여 권한을 요청할 수 있습니다.

**주의사항:**

* `kivy-garden.gps`는 GPS 정보를 얻는 데 도움을 주지만, 지도 표시는 별도의 라이브러리를 사용해야 합니다.
* `kivy-garden.gps`는 플랫폼 의존적인 라이브러리이므로, 각 플랫폼에서 정상적으로 작동하는지 확인해야 합니다.
* 사용자의 위치 정보를 처리하는 경우, 개인 정보 보호 규정을 준수해야 합니다.

이 코드를 통해 Kivy 애플리케이션에서 멀티 플랫폼 환경에서 사용자의 현재 위치를 가져와 지도에 표시할 수 있습니다. 

**참고:**

- `kivy-garden.gps` 문서: [https://kivy-garden.github.io/gps/](https://kivy-garden.github.io/gps/)
- `kivy-garden.mapview` 문서: [https://kivy-garden.github.io/mapview/](https://kivy-garden.github.io/mapview/)
- `kivy-garden.googlemaps` 문서: [https://kivy-garden.github.io/googlemaps/](https://kivy-garden.github.io/googlemaps/)
- `kivy-garden.permissions` 문서: [https://kivy-garden.github.io/permissions/](https://kivy-garden.github.io/permissions/)

네, 사용자의 위치 정보를 처리할 때 개인 정보 보호 규정을 준수하는 것은 매우 중요합니다. 사용자의 위치 정보는 민감한 개인 정보로 간주되며, 이를 부적절하게 사용하면 심각한 결과를 초래할 수 있습니다. 

**개인 정보 보호 규정 준수를 위한 핵심 사항:**

1. **명확한 정보 제공 및 동의:**
   - 사용자에게 위치 정보를 수집하는 이유와 목적을 명확하게 설명해야 합니다.
   - 사용자로부터 위치 정보 수집 및 사용에 대한 명확한 동의를 얻어야 합니다.
   - 동의는 명확하고 간결한 언어로 제공되어야 하며, 사용자가 쉽게 이해할 수 있어야 합니다.
   - 사용자는 언제든지 동의를 철회할 수 있어야 합니다.

2. **최소한의 데이터 수집:**
   - 애플리케이션에서 수행하는 기능에 필요한 최소한의 위치 정보만 수집해야 합니다.
   - 사용자의 위치 정보를 다른 목적으로 사용하지 않아야 합니다. 
   - 예를 들어, 날씨 앱에서는 현재 위치만 필요하지만, 택시 호출 앱에서는 출발지와 목적지를 모두 알아야 합니다.

3. **보안 유지 및 암호화:**
   - 수집한 위치 정보는 보안이 유지되어야 하며, 무단 접근을 방지해야 합니다.
   - 데이터를 암호화하여 저장하고 전송해야 합니다.
   - 앱에 보안 취약점이 있는지 정기적으로 점검해야 합니다.

4. **데이터 삭제 및 보관 기간:**
   - 더 이상 필요하지 않은 위치 정보는 즉시 삭제해야 합니다.
   - 위치 정보를 보관하는 경우, 최소한의 기간만 보관해야 하며, 적절한 보관 및 삭제 정책을 수립해야 합니다.

5. **투명성 및 제어:**
   - 사용자에게 위치 정보 수집 및 사용에 대한 투명성을 제공해야 합니다.
   - 사용자가 자신의 위치 정보에 대한 접근, 수정 및 삭제를 제어할 수 있도록 기능을 제공해야 합니다.
   - 사용자에게 위치 정보 설정을 편리하게 변경할 수 있는 방법을 제공해야 합니다.

**위치 정보 보호를 위한 추가 팁:**

* **어플리케이션 내에서 위치 정보 사용을 명확히 표시:** 사용자가 언제 위치 정보를 사용하는지 명확히 알 수 있도록 UI에 표시해야 합니다. 예를 들어, 위치 정보를 사용하는 기능을 활성화하거나 비활성화할 수 있는 옵션을 제공해야 합니다.
* **위치 정보 수집 빈도 제한:**  애플리케이션의 기능에 필요한 경우에만 위치 정보를 수집해야 하며, 잦은 수집은 사용자의 배터리를 소모시킬 수 있습니다.
* **위치 정보 정확도 제어:**  애플리케이션의 기능에 필요한 수준의 정확도로 위치 정보를 수집해야 합니다. 
* **사용자에게 정보를 제공:** 사용자에게 자신의 위치 정보가 어떻게 사용되는지 정기적으로 알려야 합니다. 예를 들어, 사용자의 위치 정보가 다른 서비스와 공유되거나 분석에 사용되는 경우, 이를 사용자에게 알려야 합니다.

**개인 정보 보호 규정 위반 시:**

* 벌금, 소송 등의 법적 처벌
* 사용자 신뢰도 저하
* 기업 이미지 실추

**참고:**

* **GDPR (General Data Protection Regulation):** 유럽 연합에서 제정한 개인 정보 보호 규정으로, 전 세계 많은 기업들이 이 규정을 준수해야 합니다.
* **CCPA (California Consumer Privacy Act):** 캘리포니아주에서 제정된 개인 정보 보호 규정입니다.
* **개인정보보호위원회:** 한국에서 개인 정보 보호를 담당하는 정부 기관입니다.

위치 정보는 사용자에게 매우 중요한 개인 정보이며, 개발자는 앱 개발 과정에서 개인 정보 보호를 최우선으로 생각해야 합니다.